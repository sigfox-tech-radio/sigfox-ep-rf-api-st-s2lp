diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/MCU_Interface_template.h b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/MCU_Interface_template.h
index 1694eea..2aa1e85 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/MCU_Interface_template.h
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/MCU_Interface_template.h
@@ -50,7 +50,7 @@
 
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_Config.h"
-#include "S2LP_CORE_SPI.h"
+#include "S2LP_Types.h"
 
 #ifdef __cplusplus
 extern "C" {
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Commands.h b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Commands.h
index 443c46a..b462ea9 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Commands.h
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Commands.h
@@ -43,7 +43,6 @@
 
 #include "S2LP_Regs.h"
 #include "S2LP_Types.h"
-#include "S2LP_CORE_SPI.h"
 
 #ifdef __cplusplus
  extern "C" {
@@ -117,8 +116,8 @@ typedef enum
  * @retval None.
  * @note: this macro sets the SMPS switching frequency to 5.46MHz about for ETSI regulation compliancy.
  */
-#define S2LPCmdStrobeTx()         {uint8_t tmp=0x9C; S2LPSpiWriteRegisters(0x76,1,&tmp);\
-                                        FEM_Operation(FEM_TX); S2LPCmdStrobeCommand(CMD_TX);}
+#define S2LPCmdStrobeTx()         {uint8_t tmp=0x9C; S2LPSpiWriteRegisters(PM_CONF3_ADDR, 1, &tmp);\
+                                        S2LPCmdStrobeCommand(CMD_TX);}
 
 /**
  * @brief  Sends the RX command to S2-LP. Start to receive.
@@ -126,8 +125,8 @@ typedef enum
  * @retval None.
  * @note: this macro sets the SMPS switching frequency to 3.12MHz.
  */
-#define S2LPCmdStrobeRx()         {uint8_t tmp=0x90; S2LPSpiWriteRegisters(0x76,1,&tmp);\
-                                    FEM_Operation(FEM_RX); S2LPCmdStrobeCommand(CMD_RX);}
+#define S2LPCmdStrobeRx()         {uint8_t tmp=0x90; S2LPSpiWriteRegisters(PM_CONF3_ADDR, 1, &tmp);\
+                                    S2LPCmdStrobeCommand(CMD_RX);}
 
 #define S2LPCmdStrobeReady()      S2LPCmdStrobeCommand(CMD_READY)
 #define S2LPCmdStrobeStandby()    S2LPCmdStrobeCommand(CMD_STANDBY)
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Config.h b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Config.h
index 2bb6f84..eb06a5a 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Config.h
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Config.h
@@ -46,7 +46,6 @@
 #include "S2LP_Radio.h"
 #include "S2LP_Qi.h"
 #include "S2LP_Types.h"
-#include "S2LP_CORE_SPI.h"
 
 
 #ifdef __cplusplus
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Csma.h b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Csma.h
index 115e6c0..c08b6af 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Csma.h
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Csma.h
@@ -57,7 +57,6 @@
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_Types.h"
 #include "S2LP_Regs.h"
-#include "S2LP_CORE_SPI.h"
 
 #ifdef __cplusplus
  extern "C" {
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Fifo.h b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Fifo.h
index c93714f..4c48ca0 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Fifo.h
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Fifo.h
@@ -33,7 +33,6 @@
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_Regs.h"
 #include "S2LP_Types.h"
-#include "S2LP_CORE_SPI.h"
 
 
 #ifdef __cplusplus
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_General.h b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_General.h
index 940386e..2beb457 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_General.h
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_General.h
@@ -30,7 +30,6 @@
 
 #include "S2LP_Regs.h"
 #include "S2LP_Types.h"
-#include "S2LP_CORE_SPI.h"
 
 
 
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Gpio.h b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Gpio.h
index 9d69da6..8e590f7 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Gpio.h
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Gpio.h
@@ -53,7 +53,6 @@
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_Regs.h"
 #include "S2LP_Types.h"
-#include "S2LP_CORE_SPI.h"
 
 
 #ifdef __cplusplus
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PacketHandler.h b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PacketHandler.h
index f37c9d2..ddf23f4 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PacketHandler.h
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PacketHandler.h
@@ -49,7 +49,6 @@
 
 #include "S2LP_Regs.h"
 #include "S2LP_Types.h"
-#include "S2LP_CORE_SPI.h"
 
 #ifdef __cplusplus
  extern "C" {
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PktBasic.h b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PktBasic.h
index 73d5239..01d9cd9 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PktBasic.h
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PktBasic.h
@@ -81,7 +81,6 @@
 #include "S2LP_Regs.h"
 #include "S2LP_Types.h"
 #include "S2LP_PacketHandler.h"
-#include "S2LP_CORE_SPI.h"
 
 #ifdef __cplusplus
  extern "C" {
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PktStack.h b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PktStack.h
index 08d10d6..7dbf373 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PktStack.h
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PktStack.h
@@ -81,7 +81,6 @@
 #include "S2LP_Regs.h"
 #include "S2LP_Types.h"
 #include "S2LP_PacketHandler.h"
-#include "S2LP_CORE_SPI.h"
 
 
 #ifdef __cplusplus
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PktWMbus.h b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PktWMbus.h
index 4e963b0..e94b530 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PktWMbus.h
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_PktWMbus.h
@@ -58,7 +58,6 @@
 #include "S2LP_Regs.h"
 #include "S2LP_Types.h"
 #include "S2LP_PacketHandler.h"
-#include "S2LP_CORE_SPI.h"
 
 #ifdef __cplusplus
  extern "C" {
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Qi.h b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Qi.h
index d39caed..05c41a5 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Qi.h
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Qi.h
@@ -54,7 +54,6 @@
 
 #include "S2LP_Regs.h"
 #include "S2LP_Types.h"
-#include "S2LP_CORE_SPI.h"
 
 
 #ifdef __cplusplus
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Radio.h b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Radio.h
index 6b62c30..83a48dc 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Radio.h
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Radio.h
@@ -66,7 +66,6 @@
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_Regs.h"
 #include "S2LP_Types.h"
-#include "S2LP_CORE_SPI.h"
 
 
 #ifdef __cplusplus
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Timer.h b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Timer.h
index 7d9e35a..094b9c2 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Timer.h
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Timer.h
@@ -52,7 +52,6 @@
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_Regs.h"
 #include "S2LP_Types.h"
-#include "S2LP_CORE_SPI.h"
 
 
 #ifdef __cplusplus
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Timer_ex.h b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Timer_ex.h
index b2c3119..3dbc530 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Timer_ex.h
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/inc/S2LP_Timer_ex.h
@@ -40,8 +40,7 @@
 
 /* Includes ------------------------------------------------------------------*/
 
-#include "S2LP_Timer_ex.h"
-#include "S2LP_CORE_SPI.h"
+#include "S2LP_Timer.h"
 
 
 #ifdef __cplusplus
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Commands.c b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Commands.c
index 05d3238..fa7f426 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Commands.c
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Commands.c
@@ -24,7 +24,8 @@
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_Commands.h"
 
-
+#include "MCU_Interface_template.h"
+#include "S2LP_Types.h"
 
 /**
  * @addtogroup S2LP_Libraries
@@ -119,7 +120,7 @@ void S2LPCmdStrobeCommand(S2LPCmd xCommandCode)
   /* Check the parameters */
   s_assert_param(IS_S2LP_CMD(xCommandCode));
 
-  *(uint8_t*)&g_xStatus = S2LPSpiCommandStrobes((uint8_t) xCommandCode);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiCommandStrobes((uint8_t) xCommandCode);
 }
 
 
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Csma.c b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Csma.c
index 41afff2..20c0e67 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Csma.c
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Csma.c
@@ -24,7 +24,9 @@
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_Csma.h"
 
-
+#include "MCU_Interface_template.h"
+#include "S2LP_Regs.h"
+#include "S2LP_Types.h"
 
 /**
  * @addtogroup S2LP_Libraries
@@ -149,7 +151,7 @@ void S2LPCsmaInit(SCsmaInit* pxCsmaInit)
   }
 
   /* Writes PROTOCOL1_BASE register */
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmpBuffer[0]);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmpBuffer[0]);
 
 
 }
@@ -172,7 +174,7 @@ void S2LPCsmaGetInfo(SCsmaInit* pxSCsmaInit)
    pxSCsmaInit->xCsmaPersistentMode = (SFunctionalState)((tmpBuffer[0]&CSMA_PERS_ON_REGMASK) >> 1);
 
    /* Reads CSMA_CONFIGx_BASE registers */
-   *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(CSMA_CONF3_ADDR, 4, tmpBuffer);
+   *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(CSMA_CONF3_ADDR, 4, tmpBuffer);
 
    /* Reads the bu counter seed */
    pxSCsmaInit->nBuCounterSeed = (((uint16_t)tmpBuffer[0]) << 8) | (uint16_t)tmpBuffer[1];
@@ -219,7 +221,7 @@ void S2LPCsma(SFunctionalState xNewState)
     tmp &= ~CSMA_ON_REGMASK;
   }
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
 
 }
 
@@ -233,7 +235,7 @@ SFunctionalState S2LPCsmaGetCsma(void)
   uint8_t tmp;
 
   /* Reads the PROTOCOL1 register value */
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PROTOCOL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PROTOCOL1_ADDR, 1, &tmp);
 
   /* Return if set or reset */
   if(tmp & CSMA_ON_REGMASK) {
@@ -266,7 +268,7 @@ void S2LPCsmaPersistentMode(SFunctionalState xNewState)
     tmp &= ~CSMA_PERS_ON_REGMASK;
   }
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
 
 }
 
@@ -280,7 +282,7 @@ SFunctionalState S2LPCsmaGetPersistentMode(void)
 {
   uint8_t tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PROTOCOL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PROTOCOL1_ADDR, 1, &tmp);
 
   if(tmp & CSMA_PERS_ON_REGMASK) {
     return S_ENABLE;
@@ -313,7 +315,7 @@ void S2LPCsmaSeedReloadMode(SFunctionalState xNewState)
     tmp &= ~SEED_RELOAD_REGMASK;
   }
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
 
 }
 
@@ -327,7 +329,7 @@ SFunctionalState S2LPCsmaGetSeedReloadMode(void)
 {
   uint8_t tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PROTOCOL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PROTOCOL1_ADDR, 1, &tmp);
 
   /* Return if set or reset */
   if(tmp & SEED_RELOAD_REGMASK) {
@@ -353,7 +355,7 @@ void S2LPCsmaSetBuCounterSeed(uint16_t nBuCounterSeed)
   tmpBuffer[0] = (uint8_t)(nBuCounterSeed>>8);
   tmpBuffer[1] = (uint8_t)nBuCounterSeed;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(CSMA_CONF3_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(CSMA_CONF3_ADDR, 2, tmpBuffer);
 
 }
 
@@ -366,7 +368,7 @@ uint16_t S2LPCsmaGetBuCounterSeed(void)
 {
   uint8_t tmpBuffer[2];
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(CSMA_CONF3_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(CSMA_CONF3_ADDR, 2, tmpBuffer);
 
   return ((((uint16_t)tmpBuffer[0])<<8) + (uint16_t)tmpBuffer[1]);
 }
@@ -388,7 +390,7 @@ void S2LPCsmaSetBuPrescaler(uint8_t cBuPrescaler)
   tmp &= ~BU_PRSC_REGMASK;
   tmp |= (cBuPrescaler<<2);
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(CSMA_CONF1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(CSMA_CONF1_ADDR, 1, &tmp);
 }
 
 
@@ -401,7 +403,7 @@ uint8_t S2LPCsmaGetBuPrescaler(void)
 {
   uint8_t tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(CSMA_CONF1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(CSMA_CONF1_ADDR, 1, &tmp);
 
   return (tmp >> 2);
 }
@@ -423,7 +425,7 @@ void S2LPCsmaSetCcaPeriod(SCsmaPeriod xMultiplierTbit)
   tmp &= ~CCA_PERIOD_REGMASK;
   tmp |= xMultiplierTbit;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(CSMA_CONF1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(CSMA_CONF1_ADDR, 1, &tmp);
 
 }
 
@@ -437,7 +439,7 @@ uint8_t S2LPCsmaGetCcaPeriod(void)
 {
   uint8_t tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(CSMA_CONF1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(CSMA_CONF1_ADDR, 1, &tmp);
 
   return (SCsmaPeriod)(tmp & CCA_PERIOD_REGMASK);
 }
@@ -459,7 +461,7 @@ void S2LPCsmaSetCcaLength(uint8_t xCcaLength)
   tmp &= ~CCA_LEN_REGMASK;
   tmp |= (xCcaLength<<4);
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(CSMA_CONF0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(CSMA_CONF0_ADDR, 1, &tmp);
 
 }
 
@@ -473,7 +475,7 @@ uint8_t S2LPCsmaGetCcaLength(void)
 {
   uint8_t tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(CSMA_CONF0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(CSMA_CONF0_ADDR, 1, &tmp);
 
   return (tmp >> 4);
 }
@@ -495,7 +497,7 @@ void S2LPCsmaSetMaxNumberBackoff(uint8_t cMaxNb)
   tmp &= ~NBACKOFF_MAX_REGMASK;
   tmp |= cMaxNb;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(CSMA_CONF0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(CSMA_CONF0_ADDR, 1, &tmp);
 }
 
 /**
@@ -507,7 +509,7 @@ uint8_t S2LPCsmaGetMaxNumberBackoff(void)
 {
   uint8_t tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(CSMA_CONF0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(CSMA_CONF0_ADDR, 1, &tmp);
 
   return (tmp & NBACKOFF_MAX_REGMASK);
 
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Fifo.c b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Fifo.c
index 30b5832..f6b0cfb 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Fifo.c
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Fifo.c
@@ -24,6 +24,9 @@
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_Fifo.h"
 
+#include "MCU_Interface_template.h"
+#include "S2LP_Regs.h"
+#include "S2LP_Types.h"
 
 /**
  * @addtogroup S2LP_Libraries
@@ -101,7 +104,7 @@
 uint8_t S2LPFifoReadNumberBytesRxFifo(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(RX_FIFO_STATUS_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(RX_FIFO_STATUS_ADDR, 1, &tmp);
   return tmp;
 
 }
@@ -115,7 +118,7 @@ uint8_t S2LPFifoReadNumberBytesRxFifo(void)
 uint8_t S2LPFifoReadNumberBytesTxFifo(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(TX_FIFO_STATUS_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(TX_FIFO_STATUS_ADDR, 1, &tmp);
   return tmp;
 
 }
@@ -140,7 +143,7 @@ void S2LPFifoSetAlmostFullThresholdRx(uint8_t cThrRxFifo)
   tmp &= ~RX_AFTHR_REGMASK;
   tmp |= cThrRxFifo;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(FIFO_CONFIG3_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(FIFO_CONFIG3_ADDR, 1, &tmp);
 
 }
 
@@ -156,7 +159,7 @@ uint8_t S2LPFifoGetAlmostFullThresholdRx(void)
 {
   uint8_t tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(FIFO_CONFIG3_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(FIFO_CONFIG3_ADDR, 1, &tmp);
 
   return (tmp & RX_AFTHR_REGMASK);
 
@@ -180,7 +183,7 @@ void S2LPFifoSetAlmostEmptyThresholdRx(uint8_t cThrRxFifo)
   tmp &= ~RX_AETHR_REGMASK;
   tmp |= cThrRxFifo;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(FIFO_CONFIG2_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(FIFO_CONFIG2_ADDR, 1, &tmp);
 
 }
 
@@ -194,7 +197,7 @@ uint8_t S2LPFifoGetAlmostEmptyThresholdRx(void)
 {
   uint8_t tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(FIFO_CONFIG2_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(FIFO_CONFIG2_ADDR, 1, &tmp);
 
   return (tmp & RX_AETHR_REGMASK);
 
@@ -220,7 +223,7 @@ void S2LPFifoSetAlmostFullThresholdTx(uint8_t cThrTxFifo)
   tmp &= ~TX_AFTHR_REGMASK;
   tmp |= cThrTxFifo;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(FIFO_CONFIG1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(FIFO_CONFIG1_ADDR, 1, &tmp);
 
 }
 
@@ -236,7 +239,7 @@ uint8_t S2LPFifoGetAlmostFullThresholdTx(void)
 {
   uint8_t tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(FIFO_CONFIG1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(FIFO_CONFIG1_ADDR, 1, &tmp);
 
   return (tmp & TX_AFTHR_REGMASK);
 
@@ -262,7 +265,7 @@ void S2LPFifoSetAlmostEmptyThresholdTx(uint8_t cThrTxFifo)
   tmp |= cThrTxFifo;
 
   /* Writes the Almost Empty threshold for Tx in the corresponding register */
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(FIFO_CONFIG0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(FIFO_CONFIG0_ADDR, 1, &tmp);
 
 }
 
@@ -276,7 +279,7 @@ uint8_t S2LPFifoGetAlmostEmptyThresholdTx(void)
 {
   uint8_t tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(FIFO_CONFIG0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(FIFO_CONFIG0_ADDR, 1, &tmp);
 
   return (tmp & TX_AETHR_REGMASK);
 
@@ -301,7 +304,7 @@ void S2LPFifoMuxRxFifoIrqEnable(SFunctionalState xNewState)
   } else {
     tmp &= ~FIFO_GPIO_OUT_MUX_SEL_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL2_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL2_ADDR, 1, &tmp);
 }
 
 
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_General.c b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_General.c
index 01ff991..09dde14 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_General.c
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_General.c
@@ -23,6 +23,9 @@
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_General.h"
 
+#include "MCU_Interface_template.h"
+#include "S2LP_Regs.h"
+#include "S2LP_Types.h"
 
 /**
  * @addtogroup S2LP_Libraries
@@ -112,7 +115,7 @@ void S2LPGeneralSetExtRef(ModeExtRef xExtMode)
   else {
     tmp |= EXT_REF_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(XO_RCO_CONF0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(XO_RCO_CONF0_ADDR, 1, &tmp);
 
 }
 
@@ -126,7 +129,7 @@ void S2LPGeneralSetExtRef(ModeExtRef xExtMode)
 ModeExtRef S2LPGeneralGetExtRef(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(XO_RCO_CONF0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(XO_RCO_CONF0_ADDR, 1, &tmp);
   return (ModeExtRef)(tmp & EXT_REF_REGMASK);
 }
 
@@ -139,7 +142,7 @@ ModeExtRef S2LPGeneralGetExtRef(void)
 uint8_t S2LPGeneralGetDevicePN(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(DEVICE_INFO1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(DEVICE_INFO1_ADDR, 1, &tmp);
   return tmp;
 }
 
@@ -174,7 +177,7 @@ void S2LPRadioSetExternalSmpsMode(SFunctionalState xNewState)
   } else {
     tmp &= ~EXT_SMPS_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PM_CONF4_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PM_CONF4_ADDR, 1, &tmp);
 }
 
 /**
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Gpio.c b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Gpio.c
index 95caad1..616e41f 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Gpio.c
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Gpio.c
@@ -24,6 +24,9 @@
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_Gpio.h"
 
+#include "MCU_Interface_template.h"
+#include "S2LP_Regs.h"
+#include "S2LP_Types.h"
 
 /** @addtogroup S2LP_Libraries
  * @{
@@ -173,7 +176,7 @@ void S2LPGpioInit(SGpioInit* pxGpioInitStruct)
   s_assert_param(IS_S2LP_GPIO_IO(pxGpioInitStruct->xS2LPGpioIO));
 
   tmp = ((uint8_t)(pxGpioInitStruct->xS2LPGpioMode) | (uint8_t)(pxGpioInitStruct->xS2LPGpioIO));
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(pxGpioInitStruct->xS2LPGpioPin, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(pxGpioInitStruct->xS2LPGpioPin, 1, &tmp);
 
 }
 
@@ -206,7 +209,7 @@ void S2LPGpioSetLevel(S2LPGpioPin xGpioX, OutputLevel xLevel)
     tmp = (uint8_t)S2LP_GPIO_DIG_OUT_GND | (uint8_t)S2LP_GPIO_MODE_DIGITAL_OUTPUT_HP;
   }
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(xGpioX, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(xGpioX, 1, &tmp);
 
 }
 
@@ -228,7 +231,7 @@ OutputLevel S2LPGpioGetLevel(S2LPGpioPin xGpioX)
 
   s_assert_param(IS_S2LP_GPIO(xGpioX));
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(xGpioX, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(xGpioX, 1, &tmp);
 
   /* Mask the GPIO_SELECT field and returns the value according */
   tmp &= GPIO_SELECT_REGMASK;
@@ -257,7 +260,7 @@ void S2LPGpioIrqDeInit(S2LPIrqs* pxIrqInit)
     *pxIrqInit = (*(S2LPIrqs*)&tmp);
   }
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(IRQ_MASK3_ADDR, 4, tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(IRQ_MASK3_ADDR, 4, tmp);
 }
 
 
@@ -284,7 +287,7 @@ void S2LPGpioIrqInit(S2LPIrqs* pxIrqInit)
     tmp[3-i]= tmpPoint[i];
   }
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(IRQ_MASK3_ADDR, 4, tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(IRQ_MASK3_ADDR, 4, tmp);
 
 }
 
@@ -325,7 +328,7 @@ void S2LPGpioIrqConfig(IrqList xIrq, SFunctionalState xNewState)
     tmpBuffer[j] = (uint8_t)(tempValue>>(8*(3-j)));
   }
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(IRQ_MASK3_ADDR, 4, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(IRQ_MASK3_ADDR, 4, tmpBuffer);
 
 }
 
@@ -351,7 +354,7 @@ void S2LPGpioIrqGetMask(S2LPIrqs* pxIrqMask)
   uint8_t tmp[4];
   uint8_t* pIrqPointer = (uint8_t*)pxIrqMask;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(IRQ_MASK3_ADDR, 4, tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(IRQ_MASK3_ADDR, 4, tmp);
 
   for(uint8_t i=0; i<4; i++) {
     *pIrqPointer = tmp[3-i];
@@ -382,7 +385,7 @@ void S2LPGpioIrqGetStatus(S2LPIrqs* pxIrqStatus)
   uint8_t tmp[4];
   uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(IRQ_STATUS3_ADDR, 4, tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(IRQ_STATUS3_ADDR, 4, tmp);
 
 
 
@@ -402,7 +405,7 @@ void S2LPGpioIrqGetStatus(S2LPIrqs* pxIrqStatus)
 void S2LPGpioIrqClearStatus(void)
 {
   uint8_t tmp[4];
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(IRQ_STATUS3_ADDR, 4, tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(IRQ_STATUS3_ADDR, 4, tmp);
 
 }
 
@@ -422,7 +425,7 @@ SBool S2LPGpioIrqCheckFlag(IrqList xFlag)
 
   s_assert_param(IS_S2LP_IRQ_LIST(xFlag));
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(IRQ_STATUS3_ADDR, 4, tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(IRQ_STATUS3_ADDR, 4, tmp);
   for(uint8_t i=0; i<4; i++) {
     tempValue += ((uint32_t)tmp[i])<<(8*(3-i));
   }
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PacketHandler.c b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PacketHandler.c
index 790935f..b83fd84 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PacketHandler.c
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PacketHandler.c
@@ -22,8 +22,11 @@
 
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_PacketHandler.h"
-#include "S2LP_PktWMbus.h"
 
+#include "MCU_Interface_template.h"
+#include "S2LP_PktWMbus.h"
+#include "S2LP_Regs.h"
+#include "S2LP_Types.h"
 
 /**
  * @addtogroup S2LP_Libraries
@@ -118,7 +121,7 @@ uint8_t S2LPGetPacketFormat(void)
   uint8_t tmp;
 
   /* Reads the PCKTCTRL2 register value */
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKTCTRL3_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKTCTRL3_ADDR, 1, &tmp);
 
   tmp &= PCKT_FRMT_REGMASK;
   tmp >>= 6;
@@ -151,7 +154,7 @@ void S2LPSetPreambleLength(uint16_t cPreambleLength)
   tmpBuffer[0] |= (cPreambleLength>>8) & PREAMBLE_LEN_9_8_REGMASK;
   tmpBuffer[1] = cPreambleLength & PREAMBLE_LEN_7_0_REGMASK;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL6_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL6_ADDR, 2, tmpBuffer);
 
 }
 
@@ -166,7 +169,7 @@ uint16_t S2LPGetPreambleLength(void)
   uint8_t tmpBuffer[2];
 
   /* Reads the PCKTCTRL2 register value */
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKTCTRL6_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKTCTRL6_ADDR, 2, tmpBuffer);
 
   /* Rebuild and return value */
   return ( ((((uint16_t)tmpBuffer[0])&PREAMBLE_LEN_9_8_REGMASK)<<8) | ((uint16_t)tmpBuffer[1]));
@@ -190,7 +193,7 @@ void S2LPSetSyncLength(uint8_t cSyncLength)
   tmp &= ~SYNC_LEN_REGMASK;
   tmp |= (cSyncLength<<2);
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL6_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL6_ADDR, 1, &tmp);
 
 }
 
@@ -203,7 +206,7 @@ void S2LPSetSyncLength(uint8_t cSyncLength)
 uint8_t S2LPGetSyncLength(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKTCTRL6_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKTCTRL6_ADDR, 1, &tmp);
   return (((tmp & SYNC_LEN_REGMASK)>>2) );
 
 }
@@ -227,7 +230,7 @@ void S2LPPacketHandlerWhitening(SFunctionalState xNewState)
   else {
     tmp &= ~WHIT_EN_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL1_ADDR, 1, &tmp);
 
 }
 
@@ -248,7 +251,7 @@ void S2LPPacketHandlerFec(SFunctionalState xNewState)
   else {
     tmp &= ~FEC_EN_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL1_ADDR, 1, &tmp);
 
 }
 
@@ -267,7 +270,7 @@ void S2LPPacketHandlerManchester(SFunctionalState xNewState)
   tmp &= ~MANCHESTER_EN_REGMASK;
   tmp |= (((uint8_t)xNewState)<<1);
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL2_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL2_ADDR, 1, &tmp);
 
 }
 
@@ -286,7 +289,7 @@ void S2LPPacketHandler3OutOf6(SFunctionalState xNewState)
   tmp &= ~MBUS_3OF6_EN_REGMASK;
   tmp |= (((uint8_t)xNewState)<<2);
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL2_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL2_ADDR, 1, &tmp);
 
 }
 
@@ -314,7 +317,7 @@ void S2LPSetSyncWords(uint32_t lSyncWords, uint8_t cSyncLength)
   S2LPSpiWriteRegisters(PCKTCTRL6_ADDR, 1, &tmp);
 
   /* Writes the new value on the PCKTCTRL2 register */
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(SYNC3_ADDR, 4, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(SYNC3_ADDR, 4, tmpBuffer);
 
 }
 
@@ -336,7 +339,7 @@ void S2LPGetSyncWords(uint32_t* lSyncWords, uint8_t* cSyncLength)
   tmp >>= 2;
   *cSyncLength = tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(SYNC3_ADDR, 4, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(SYNC3_ADDR, 4, tmpBuffer);
   *lSyncWords = ((uint32_t)tmpBuffer[0]<<24) | ((uint32_t)tmpBuffer[1]<<16) | ((uint32_t)tmpBuffer[2]<<8) | ((uint32_t)tmpBuffer[3]);
 
 }
@@ -360,7 +363,7 @@ void S2LPPktCommonFilterOnCrc(SFunctionalState xNewState)
   else {
     tmp &= ~CRC_FLT_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_OPTIONS_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_OPTIONS_ADDR, 1, &tmp);
 
 }
 
@@ -374,7 +377,7 @@ void S2LPPktCommonFilterOnCrc(SFunctionalState xNewState)
 uint8_t S2LPGetReceivedDestinationAddress(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(RX_ADDRE_FIELD0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(RX_ADDRE_FIELD0_ADDR, 1, &tmp);
   return tmp;
 }
 
@@ -387,7 +390,7 @@ uint8_t S2LPGetReceivedDestinationAddress(void)
 uint8_t S2LPGetReceivedSourceAddress(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(RX_ADDRE_FIELD1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(RX_ADDRE_FIELD1_ADDR, 1, &tmp);
   return tmp;
 }
 
@@ -400,7 +403,7 @@ uint8_t S2LPGetReceivedSourceAddress(void)
 uint8_t S2LPGetMyAddress(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_GOALS0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_GOALS0_ADDR, 1, &tmp);
   return tmp;
 }
 
@@ -413,7 +416,7 @@ uint8_t S2LPGetMyAddress(void)
 uint8_t S2LPGetBroadcastAddress(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_GOALS2_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_GOALS2_ADDR, 1, &tmp);
   return tmp;
 }
 
@@ -426,7 +429,7 @@ uint8_t S2LPGetBroadcastAddress(void)
 uint8_t S2LPGetMulticastAddress(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_GOALS1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_GOALS1_ADDR, 1, &tmp);
   return tmp;
 }
 
@@ -439,7 +442,7 @@ uint8_t S2LPGetMulticastAddress(void)
 uint8_t S2LPGetRxSourceMask(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_GOALS4_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_GOALS4_ADDR, 1, &tmp);
   return tmp;
 }
 
@@ -452,7 +455,7 @@ uint8_t S2LPGetRxSourceMask(void)
 uint8_t S2LPGetRxSourceReferenceAddress(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_GOALS3_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_GOALS3_ADDR, 1, &tmp);
   return tmp;
 }
 
@@ -465,7 +468,7 @@ uint8_t S2LPGetRxSourceReferenceAddress(void)
 */
 void S2LPSetRxSourceMask(uint8_t mask)
 {
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS4_ADDR, 1, &mask);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS4_ADDR, 1, &mask);
 }
 
 
@@ -476,7 +479,7 @@ void S2LPSetRxSourceMask(uint8_t mask)
 */
 void S2LPSetRxSourceReferenceAddress(uint8_t address)
 {
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS3_ADDR, 1, &address);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS3_ADDR, 1, &address);
 }
 
 
@@ -487,7 +490,7 @@ void S2LPSetRxSourceReferenceAddress(uint8_t address)
 */
 void S2LPSetBroadcastAddress(uint8_t address)
 {
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS2_ADDR, 1, &address);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS2_ADDR, 1, &address);
 }
 
 
@@ -498,7 +501,7 @@ void S2LPSetBroadcastAddress(uint8_t address)
 */
 void S2LPSetMulticastAddress(uint8_t address)
 {
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS1_ADDR, 1, &address);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS1_ADDR, 1, &address);
 }
 
 
@@ -510,7 +513,7 @@ void S2LPSetMulticastAddress(uint8_t address)
 */
 void S2LPSetMyAddress(uint8_t address)
 {
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS0_ADDR, 1, &address);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS0_ADDR, 1, &address);
 }
 
 
@@ -530,7 +533,7 @@ void S2LPPacketHandlerSetRxMode(DirectRx xDirectRx)
   S2LPSpiReadRegisters(PCKTCTRL3_ADDR, 1, &tmp);
   tmp &= ~RX_MODE_REGMASK;
   tmp |= (uint8_t)xDirectRx;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL3_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL3_ADDR, 1, &tmp);
 
 }
 
@@ -543,7 +546,7 @@ void S2LPPacketHandlerSetRxMode(DirectRx xDirectRx)
 DirectRx S2LPPacketHandlerGetRxMode(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKTCTRL3_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKTCTRL3_ADDR, 1, &tmp);
   return (DirectRx)(tmp & RX_MODE_REGMASK);
 
 }
@@ -563,7 +566,7 @@ void S2LPPacketHandlerSetTxMode(DirectTx xDirectTx)
   S2LPSpiReadRegisters(PCKTCTRL1_ADDR, 1, &tmp);
   tmp &= ~TXSOURCE_REGMASK;
   tmp |= (uint8_t)xDirectTx;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL1_ADDR, 1, &tmp);
 }
 
 
@@ -575,7 +578,7 @@ void S2LPPacketHandlerSetTxMode(DirectTx xDirectTx)
 DirectTx S2LPPacketHandlerGetTxMode(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKTCTRL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKTCTRL1_ADDR, 1, &tmp);
   return (DirectTx)(tmp & TXSOURCE_REGMASK);
 }
 
@@ -589,7 +592,7 @@ uint8_t S2LPPacketHandlerGetTransmittedSeqNumber(void)
   uint8_t tempRegValue;
 
   /* Reads the TX_PCKT_INFO register value */
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(TX_PCKT_INFO_ADDR, 1, &tempRegValue);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(TX_PCKT_INFO_ADDR, 1, &tempRegValue);
 
   /* Obtains and returns the TX sequence number */
   return (tempRegValue >> 4) & 0x07;
@@ -613,7 +616,7 @@ void S2LPPacketHandlerSetExtendedLenField(SFunctionalState xExtendedLenField)
   else {
     tmp &= ~LEN_WID_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL4_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL4_ADDR, 1, &tmp);
 }
 
 
@@ -634,7 +637,7 @@ void S2LPPacketHandlerSwap4FSKSymbol(SFunctionalState xSwapSymbol)
   else {
     tmp &= ~FSK4_SYM_SWAP_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL3_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL3_ADDR, 1, &tmp);
 }
 
 /**
@@ -655,7 +658,7 @@ void S2LPPacketHandlerSwapFifoEndianess(SFunctionalState xEnableSwap)
   else {
     tmp &= ~BYTE_SWAP_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL3_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL3_ADDR, 1, &tmp);
 }
 
 /**
@@ -676,7 +679,7 @@ void S2LPPacketHandlerSwapPreamblePattern(SFunctionalState xEnableSwap)
     tmp |= 0x01;
   }
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL3_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL3_ADDR, 1, &tmp);
 }
 
 
@@ -698,7 +701,7 @@ void S2LPPacketHandlerSetVariableLength(SFunctionalState xVarLen)
   else {
     tmp &= ~FIX_VAR_LEN_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL2_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL2_ADDR, 1, &tmp);
 }
 
 
@@ -755,7 +758,7 @@ void S2LPPacketHandlerSelectSecondarySync(SFunctionalState xSecondarySync)
   else {
     tmp &= ~SECOND_SYNC_SEL_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL1_ADDR, 1, &tmp);
 
 }
 
@@ -778,7 +781,7 @@ void S2LPPacketHandlerSetAutoPcktFilter(SFunctionalState xNewState)
   else {
     tmp &= ~AUTO_PCKT_FLT_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
 }
 
 
@@ -800,7 +803,7 @@ void S2LPPacketHandlerSetRxPersistentMode(SFunctionalState xNewState)
   else {
     tmp &= ~PERS_RX_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL0_ADDR, 1, &tmp);
 }
 
 
@@ -821,7 +824,7 @@ void S2LPPacketHandlerSetSrcAddrFlt(SFunctionalState xNewState)
   else {
     tmp &= ~SOURCE_ADDR_FLT_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_OPTIONS_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_OPTIONS_ADDR, 1, &tmp);
 }
 
 
@@ -840,7 +843,7 @@ void S2LPSetDualSyncWords(uint32_t lSyncWords)
     tmpBuffer[i]=(uint8_t)(lSyncWords>>(8*i));
   }
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS3_ADDR, 4, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS3_ADDR, 4, tmpBuffer);
 }
 
 
@@ -853,7 +856,7 @@ void S2LPGetDualSyncWords(uint32_t* lSyncWords)
 {
   uint8_t tmpBuffer[4];
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_GOALS3_ADDR, 4, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_GOALS3_ADDR, 4, tmpBuffer);
   *lSyncWords = ((uint32_t)tmpBuffer[0]<<24) | ((uint32_t)tmpBuffer[1]<<16) | ((uint32_t)tmpBuffer[2]<<8) | ((uint32_t)tmpBuffer[3]);
 }
 
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PktBasic.c b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PktBasic.c
index a292a1f..367cf72 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PktBasic.c
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PktBasic.c
@@ -23,8 +23,11 @@
 
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_PktBasic.h"
-#include "S2LP_PktWMbus.h"
 
+#include "MCU_Interface_template.h"
+#include "S2LP_PktWMbus.h"
+#include "S2LP_Regs.h"
+#include "S2LP_Types.h"
 
 /**
  * @addtogroup S2LP_Libraries
@@ -152,7 +155,7 @@ void S2LPPktBasicInit(PktBasicInit* pxPktBasicInit)
   for(uint8_t i=0 ; i<4 ; i++) {
     tmpBuffer[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(SYNC3_ADDR, 4, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(SYNC3_ADDR, 4, tmpBuffer);
 
   /* Sets CRC check bit */
   if(pxPktBasicInit->xCrcMode == PKT_NO_CRC) {
@@ -209,7 +212,7 @@ void S2LPPktBasicGetInfo(PktBasicInit* pxPktBasicInit)
   /* FEC */
   pxPktBasicInit->xFec = (SFunctionalState)(tmpBuffer[5] & FEC_EN_REGMASK);
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(SYNC3_ADDR, 4, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(SYNC3_ADDR, 4, tmpBuffer);
 
   /* SYNC word */
   pxPktBasicInit->lSyncWords = 0;
@@ -266,7 +269,7 @@ void S2LPPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
   tmpBuffer[0] = pxPktBasicAddresses->cBroadcastAddress;
   tmpBuffer[1] = pxPktBasicAddresses->cMulticastAddress;
   tmpBuffer[2] = pxPktBasicAddresses->cMyAddress;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS2_ADDR, 3, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS2_ADDR, 3, tmpBuffer);
 }
 
 
@@ -286,7 +289,7 @@ void S2LPPktBasicGetAddressesInfo(PktBasicAddressesInit* pxPktBasicAddresses)
   pxPktBasicAddresses->cMulticastAddress = tmpBuffer[1];
   pxPktBasicAddresses->cMyAddress = tmpBuffer[2];
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_OPTIONS_ADDR, 1, &tmpBuffer[0]);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_OPTIONS_ADDR, 1, &tmpBuffer[0]);
   pxPktBasicAddresses->xFilterOnBroadcastAddress = (SFunctionalState)((tmpBuffer[0] & DEST_VS_BROADCAST_ADDR_REGMASK) >> 3);
   pxPktBasicAddresses->xFilterOnMulticastAddress = (SFunctionalState)((tmpBuffer[0] & DEST_VS_MULTICAST_ADDR_REGMASK) >> 2);
   pxPktBasicAddresses->xFilterOnMyAddress = (SFunctionalState)((tmpBuffer[0] & DEST_VS_SOURCE_ADDR_REGMASK) >> 1);
@@ -312,7 +315,7 @@ void S2LPPktBasicSetFormat(void)
 
   /* Set to 0 the direct TX mode bits */
   tmp &= ~TXSOURCE_REGMASK;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL1_ADDR, 1, &tmp);
 
   S2LPPktWMbusSetSubmode(WMBUS_SUBMODE_NOT_CONFIGURED);
 }
@@ -336,7 +339,7 @@ void S2LPPktBasicAddressField(SFunctionalState xAddressField)
   else {
     tmp &= ADDRESS_LEN_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL4_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL4_ADDR, 1, &tmp);
 
 }
 
@@ -350,7 +353,7 @@ SFunctionalState S2LPPktBasicGetAddressField(void)
 {
   uint8_t tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKTCTRL4_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKTCTRL4_ADDR, 1, &tmp);
   if(tmp & ADDRESS_LEN_REGMASK) {
     return S_ENABLE;
   }
@@ -379,7 +382,7 @@ void S2LPPktBasicSetPayloadLength(uint16_t nPayloadLength)
   }
   tmpBuffer[0] = (uint8_t)(nPayloadLength>>8);
   tmpBuffer[1] = (uint8_t)nPayloadLength;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTLEN1_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTLEN1_ADDR, 2, tmpBuffer);
 }
 
 
@@ -397,7 +400,7 @@ uint16_t S2LPPktBasicGetPayloadLength(void)
   uint8_t tmpBuffer[2];
   uint16_t nPayloadLength;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKTLEN1_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKTLEN1_ADDR, 2, tmpBuffer);
   nPayloadLength = (((uint16_t)tmpBuffer[0])<<8) | ((uint16_t)tmpBuffer[1]);
 
   if(S2LPPktBasicGetAddressField()) {
@@ -416,7 +419,7 @@ uint16_t S2LPPktBasicGetReceivedPktLength(void)
   uint8_t tmpBuffer[2];
   uint16_t nPayloadLength;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(RX_PCKT_LEN1_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(RX_PCKT_LEN1_ADDR, 2, tmpBuffer);
   nPayloadLength = (((uint16_t)tmpBuffer[0])<<8) | ((uint16_t)tmpBuffer[1]);
 
   if(S2LPPktBasicGetAddressField()) {
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PktStack.c b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PktStack.c
index 028511e..113c8a7 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PktStack.c
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PktStack.c
@@ -23,8 +23,11 @@
 
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_PktStack.h"
-#include "S2LP_PktWMbus.h"
 
+#include "MCU_Interface_template.h"
+#include "S2LP_PktWMbus.h"
+#include "S2LP_Regs.h"
+#include "S2LP_Types.h"
 
 /**
  * @addtogroup S2LP_Libraries
@@ -140,7 +143,7 @@ void S2LPPktStackInit(PktStackInit* pxPktStackInit)
   for(uint8_t i=0 ; i<4 ; i++) {
     tmpBuffer[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(SYNC3_ADDR, 4, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(SYNC3_ADDR, 4, tmpBuffer);
 
   /* Sets CRC check bit */
   if(pxPktStackInit->xCrcMode == PKT_NO_CRC) {
@@ -190,7 +193,7 @@ void S2LPPktStackGetInfo(PktStackInit* pxPktStackInit)
   /* FEC */
   pxPktStackInit->xFec = (SFunctionalState)(tmpBuffer[5] & FEC_EN_REGMASK);
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(SYNC3_ADDR, 4, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(SYNC3_ADDR, 4, tmpBuffer);
 
   /* SYNC word */
   pxPktStackInit->lSyncWords = 0;
@@ -247,7 +250,7 @@ void S2LPPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
   tmpBuffer[2] = pxPktStackAddresses->cMyAddress;
   tmpBuffer[0] = pxPktStackAddresses->cBroadcastAddress;
   tmpBuffer[1] = pxPktStackAddresses->cMulticastAddress;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS2_ADDR, 3, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_GOALS2_ADDR, 3, tmpBuffer);
 }
 
 
@@ -267,7 +270,7 @@ void S2LPPktStackGetAddressesInfo(PktStackAddressesInit* pxPktStackAddresses)
   pxPktStackAddresses->cBroadcastAddress = tmpBuffer[1];
   pxPktStackAddresses->cMulticastAddress = tmpBuffer[2];
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_OPTIONS_ADDR, 1, &tmpBuffer[0]);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKT_FLT_OPTIONS_ADDR, 1, &tmpBuffer[0]);
   pxPktStackAddresses->xFilterOnBroadcastAddress = (SFunctionalState)((tmpBuffer[0] & DEST_VS_BROADCAST_ADDR_REGMASK) >> 3);
   pxPktStackAddresses->xFilterOnMulticastAddress = (SFunctionalState)((tmpBuffer[0] & DEST_VS_MULTICAST_ADDR_REGMASK) >> 2);
   pxPktStackAddresses->xFilterOnMyAddress = (SFunctionalState)((tmpBuffer[0] & DEST_VS_SOURCE_ADDR_REGMASK) >> 1);
@@ -294,7 +297,7 @@ void S2LPPktStackSetFormat(void)
 
   /* Set to 0 the direct TX mode bits */
   tmp &= ~TXSOURCE_REGMASK;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL1_ADDR, 1, &tmp);
 
   S2LPPktWMbusSetSubmode(WMBUS_SUBMODE_NOT_CONFIGURED);
 }
@@ -317,7 +320,7 @@ void S2LPPktStackSetPayloadLength(uint16_t nPayloadLength)
   nPayloadLength+=2;
   tmpBuffer[0] = (uint8_t)(nPayloadLength>>8);
   tmpBuffer[1] = (uint8_t)nPayloadLength;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTLEN1_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTLEN1_ADDR, 2, tmpBuffer);
 }
 
 
@@ -335,7 +338,7 @@ uint16_t S2LPPktStackGetPayloadLength(void)
   uint8_t tmpBuffer[2];
   uint16_t nPayloadLength;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKTLEN1_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKTLEN1_ADDR, 2, tmpBuffer);
   nPayloadLength = (((uint16_t)tmpBuffer[0])<<8) | ((uint16_t)tmpBuffer[1]);
   nPayloadLength-=2;
 
@@ -353,7 +356,7 @@ uint16_t S2LPPktStackGetReceivedPktLength(void)
   uint8_t tmpBuffer[2];
   uint16_t nPayloadLength;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(RX_PCKT_LEN1_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(RX_PCKT_LEN1_ADDR, 2, tmpBuffer);
   nPayloadLength = (((uint16_t)tmpBuffer[0])<<8) | ((uint16_t)tmpBuffer[1]);
     nPayloadLength--;
 
@@ -378,7 +381,7 @@ void S2LPPktStackAutoAck(SFunctionalState xNewState)
   else {
     tmp &= ~AUTO_ACK_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL0_ADDR, 1, &tmp);
 
 }
 
@@ -396,7 +399,7 @@ void S2LPPktStackNRetx(uint8_t nRetx)
   S2LPSpiReadRegisters(PROTOCOL0_ADDR, 1, &tmp);
   tmp &= ~NMAX_RETX_REGMASK;
   tmp |= (nRetx<<4);
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL0_ADDR, 1, &tmp);
 
 }
 
@@ -434,7 +437,7 @@ void S2LPPktStackAckRequest(SFunctionalState xNewState)
   else {
     tmp |= NACK_TX_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL0_ADDR, 1, &tmp);
 
 }
 
@@ -456,7 +459,7 @@ void S2LPPktStackPiggybacking(SFunctionalState xNewState)
   else {
     tmp &= ~PIGGYBACKING_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
 
 }
 
@@ -475,7 +478,7 @@ void S2LPPktStackSeqNumForReload(uint8_t cReloadValue)
   S2LPSpiReadRegisters(PROTOCOL2_ADDR, 1, &tmp);
   tmp &= ~TX_SEQ_NUM_RELOAD_REGMASK;
   tmp |= (cReloadValue<<3);
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL2_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL2_ADDR, 1, &tmp);
 }
 
 /**
@@ -488,7 +491,7 @@ uint8_t S2LPPktStackGetNReTx(void)
   uint8_t tempRetValue;
 
   /* Reads the TX_PCKT_INFO register value */
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(TX_PCKT_INFO_ADDR, 1, &tempRetValue);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(TX_PCKT_INFO_ADDR, 1, &tempRetValue);
 
   /* Obtains and returns the number of retransmission done */
   return (tempRetValue & N_RETX_REGMASK);
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PktWMbus.c b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PktWMbus.c
index 84015d0..1feb0af 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PktWMbus.c
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_PktWMbus.c
@@ -24,6 +24,10 @@
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_PktWMbus.h"
 
+#include "MCU_Interface_template.h"
+#include "S2LP_Regs.h"
+#include "S2LP_Types.h"
+
 /**
  * @addtogroup S2LP_Libraries
  * @{
@@ -215,7 +219,7 @@ void S2LPPktWMbusSetFormat(void)
 
   /* Configure the WMBUS mode packet format and reset all the other setting */
   tmpBuffer[1] |= PKT_FORMAT_WMBUS_CODE;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL4_ADDR, 4, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTCTRL4_ADDR, 4, tmpBuffer);
 
 }
 
@@ -230,9 +234,9 @@ void S2LPPktWMbusSetFormat(void)
 void S2LPPktWMbusSetPostamble(uint8_t cPostamble)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKT_PSTMBL_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKT_PSTMBL_ADDR, 1, &tmp);
   tmp  = (tmp & 0xC0) | cPostamble;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_PSTMBL_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_PSTMBL_ADDR, 1, &tmp);
 }
 
 
@@ -246,9 +250,9 @@ void S2LPPktWMbusSetPostamble(uint8_t cPostamble)
 void S2LPPktWMbusSetPostamblePattern(uint8_t cPostamble)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKT_PSTMBL_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKT_PSTMBL_ADDR, 1, &tmp);
   tmp  = (tmp & 0x3F) | (cPostamble<<6);
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_PSTMBL_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_PSTMBL_ADDR, 1, &tmp);
 }
 
 
@@ -260,7 +264,7 @@ void S2LPPktWMbusSetPostamblePattern(uint8_t cPostamble)
 uint8_t S2LPPktWMbusGetPostamble(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKT_PSTMBL_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKT_PSTMBL_ADDR, 1, &tmp);
   return (tmp & 0x3F);
 }
 
@@ -273,7 +277,7 @@ uint8_t S2LPPktWMbusGetPostamble(void)
 uint8_t S2LPPktWMbusGetPostamblePattern(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKT_PSTMBL_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKT_PSTMBL_ADDR, 1, &tmp);
   return ((tmp & 0xC0)>>6);
 }
 
@@ -312,7 +316,7 @@ void S2LPPktWMbusSetPayloadLength(uint16_t nPayloadLength)
 
   tmpBuffer[0] = (uint8_t)(nPayloadLength>>8);
   tmpBuffer[1] = (uint8_t)nPayloadLength;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKTLEN1_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKTLEN1_ADDR, 2, tmpBuffer);
 }
 
 
@@ -326,7 +330,7 @@ uint16_t S2LPPktWMbusGetPayloadLength(void)
   uint8_t tmpBuffer[2];
   uint16_t nPayloadLength;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PCKTLEN1_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PCKTLEN1_ADDR, 2, tmpBuffer);
   nPayloadLength = (((uint16_t)tmpBuffer[0])<<8) | ((uint16_t)tmpBuffer[1]);
 
   return nPayloadLength;
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Qi.c b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Qi.c
index c0f189b..d5ee608 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Qi.c
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Qi.c
@@ -24,7 +24,9 @@
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_Qi.h"
 
-
+#include "MCU_Interface_template.h"
+#include "S2LP_Regs.h"
+#include "S2LP_Types.h"
 
 /**
  * @addtogroup S2LP_Libraries
@@ -109,7 +111,7 @@
 int32_t S2LPRadioGetRssidBm(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(RSSI_LEVEL_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(RSSI_LEVEL_ADDR, 1, &tmp);
   return S2LPRadioRegToRssidBm((int32_t)tmp);
 }
 
@@ -124,7 +126,7 @@ int32_t S2LPRadioGetRssidBmRun(void)
 
   /*The first value is the previous one, so the first read operation clear this value,
                than it is read the actual during RX. */
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(RSSI_LEVEL_RUN_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(RSSI_LEVEL_RUN_ADDR, 2, tmpBuffer);
 
   return S2LPRadioRegToRssidBm((int32_t)tmpBuffer[1]);
 }
@@ -142,7 +144,7 @@ void S2LPRadioSetRssiThreshdBm(int32_t wRssiThrehsold)
   s_assert_param(IS_RSSI_DBM(wRssiThrehsold));
 
   tmp = S2LPRadioRssidBmToReg(wRssiThrehsold);
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(RSSI_TH_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(RSSI_TH_ADDR, 1, &tmp);
 }
 
 
@@ -170,7 +172,7 @@ void S2LPRadioRssiInit(SRssiInit* xSRssiInit)
 
   tmpBuffer[1] = S2LPRadioRssidBmToReg(xSRssiInit->cRssiThreshdBm);
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(RSSI_FLT_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(RSSI_FLT_ADDR, 2, tmpBuffer);
 }
 
 
@@ -211,7 +213,7 @@ void S2LPRadioCsBlanking(SFunctionalState xCsBlank)
   } else {
     tmp &= ~CS_BLANKING_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(ANT_SELECT_CONF_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(ANT_SELECT_CONF_ADDR, 1, &tmp);
 
 }
 
@@ -234,7 +236,7 @@ void S2LPRadioAntennaSwitching(SFunctionalState xAntennaSwitch)
   } else {
     tmp &= ~AS_ENABLE_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(ANT_SELECT_CONF_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(ANT_SELECT_CONF_ADDR, 1, &tmp);
 
 }
 
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Radio.c b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Radio.c
index 245da9f..a1c0c91 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Radio.c
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Radio.c
@@ -24,8 +24,11 @@
 
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_Radio.h"
-#include "S2LP_Config.h"
 
+#include "MCU_Interface_template.h"
+#include "S2LP_Config.h"
+#include "S2LP_Regs.h"
+#include "S2LP_Types.h"
 
 /** @addtogroup S2LP_Libraries
 * @{
@@ -695,7 +698,7 @@ void S2LPRadioGetInfo(SRadioInit* pxSRadioInitStruct)
   pxSRadioInitStruct->lFrequencyBase = S2LPRadioComputeFrequencyBase(tmp32, band, cRefDiv);
 
   /* Reads the radio registers */
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(MOD4_ADDR, 6, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(MOD4_ADDR, 6, tmpBuffer);
 
   /* Modulation select */
   pxSRadioInitStruct->xModulationSelect = (ModulationSelect)(tmpBuffer[2] & MOD_TYPE_REGMASK);
@@ -743,7 +746,7 @@ void S2LPRadioSetSynthWord(uint32_t lSynthWord)
   tmpBuffer[2] = (uint8_t)(lSynthWord>>8);
   tmpBuffer[3] = (uint8_t)lSynthWord;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(SYNT3_ADDR, 4, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(SYNT3_ADDR, 4, tmpBuffer);
 }
 
 
@@ -755,7 +758,7 @@ void S2LPRadioSetSynthWord(uint32_t lSynthWord)
 uint32_t S2LPRadioGetSynthWord(void)
 {
   uint8_t tmpBuffer[4];
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(SYNT3_ADDR, 4, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(SYNT3_ADDR, 4, tmpBuffer);
   return ((((uint32_t)(tmpBuffer[0] & SYNT_27_24_REGMASK))<<24) | (((uint32_t)tmpBuffer[1])<<16) | (((uint32_t)tmpBuffer[2])<<8) | ((uint32_t)tmpBuffer[3]));
 }
 
@@ -767,7 +770,7 @@ uint32_t S2LPRadioGetSynthWord(void)
 */
 void S2LPRadioSetChannel(uint8_t cChannel)
 {
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(CHNUM_ADDR, 1, &cChannel);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(CHNUM_ADDR, 1, &cChannel);
 }
 
 
@@ -779,7 +782,7 @@ void S2LPRadioSetChannel(uint8_t cChannel)
 uint8_t S2LPRadioGetChannel(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(CHNUM_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(CHNUM_ADDR, 1, &tmp);
   return tmp;
 }
 
@@ -802,7 +805,7 @@ void S2LPRadioSetRefDiv(SFunctionalState xNewState)
   } else {
     tmp &= ~REFDIV_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(XO_RCO_CONF0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(XO_RCO_CONF0_ADDR, 1, &tmp);
 }
 
 
@@ -815,7 +818,7 @@ SFunctionalState S2LPRadioGetRefDiv(void)
 {
   uint8_t tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(XO_RCO_CONF0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(XO_RCO_CONF0_ADDR, 1, &tmp);
 
   if(tmp & REFDIV_REGMASK) {
     return S_ENABLE;
@@ -843,7 +846,7 @@ void S2LPRadioSetDigDiv(SFunctionalState xNewState)
   } else {
     tmp |= PD_CLKDIV_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(XO_RCO_CONF1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(XO_RCO_CONF1_ADDR, 1, &tmp);
 }
 
 
@@ -855,7 +858,7 @@ SFunctionalState S2LPRadioGetDigDiv(void)
 {
   uint8_t tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(XO_RCO_CONF1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(XO_RCO_CONF1_ADDR, 1, &tmp);
 
   if(tmp & PD_CLKDIV_REGMASK) {
     return S_DISABLE;
@@ -875,7 +878,7 @@ void S2LPRadioSetChannelSpace(uint32_t lChannelSpace)
 {
   uint8_t tmp;
   tmp = S2LPRadioComputeChannelSpacingRegValue(lChannelSpace);
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(CH_SPACE_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(CH_SPACE_ADDR, 1, &tmp);
 }
 
 
@@ -888,7 +891,7 @@ void S2LPRadioSetChannelSpace(uint32_t lChannelSpace)
 uint32_t S2LPRadioGetChannelSpace(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(CH_SPACE_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(CH_SPACE_ADDR, 1, &tmp);
   return S2LPRadioComputeChannelSpacing(tmp);
 }
 
@@ -929,7 +932,7 @@ uint8_t S2LPRadioSetFrequencyBase(uint32_t lFBase)
   tmpBuffer[2] = (uint8_t)(tmp32>>8);
   tmpBuffer[3] = (uint8_t)tmp32;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(SYNT3_ADDR, 4, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(SYNT3_ADDR, 4, tmpBuffer);
 
   return 0;
 }
@@ -947,7 +950,7 @@ uint32_t S2LPRadioGetFrequencyBase(void)
   uint8_t cRefDiv, band;
 
   /* Reads the synth registers */
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(SYNT3_ADDR, 4, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(SYNT3_ADDR, 4, tmpBuffer);
 
   /* Reads the operating band masking the Band selected field */
   if(tmpBuffer[0] & BS_REGMASK) {
@@ -997,7 +1000,7 @@ void S2LPRadioSetDatarate(uint32_t lDatarate)
   tmpBuffer[2] |= dr_e;
 
   /* Writes the Datarate registers */
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(MOD4_ADDR, 3, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(MOD4_ADDR, 3, tmpBuffer);
 
 }
 
@@ -1012,7 +1015,7 @@ uint32_t S2LPRadioGetDatarate(void)
   uint8_t tmpBuffer[3], dr_e;
   uint16_t dr_m;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(MOD4_ADDR, 3, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(MOD4_ADDR, 3, tmpBuffer);
   dr_m = (((uint16_t)tmpBuffer[0])<<8) | ((uint16_t)tmpBuffer[1]);
   dr_e = tmpBuffer[2]&DATARATE_E_REGMASK;
 
@@ -1039,7 +1042,7 @@ void S2LPRadioSetFrequencyDev(uint32_t lFDev)
   tmpBuffer[0] &= ~FDEV_E_REGMASK;
   tmpBuffer[0] |= uFDevE;
   tmpBuffer[1] = uFDevM;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(MOD1_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(MOD1_ADDR, 2, tmpBuffer);
 }
 
 
@@ -1054,7 +1057,7 @@ uint32_t S2LPRadioGetFrequencyDev(void)
   uint8_t tmpBuffer[2], uFDevE, tmp, refdiv, cBs = HIGH_BAND_FACTOR;
 
   refdiv = (uint8_t)S2LPRadioGetRefDiv() + 1;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(SYNT3_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(SYNT3_ADDR, 1, &tmp);
   if((tmp&BS_REGMASK) == 0) {
     cBs = MIDDLE_BAND_FACTOR;
   }
@@ -1094,7 +1097,7 @@ void S2LPRadioSetChannelBW(uint32_t lBandwidth)
   tmpBuffer = (uBwM<<4)|(uBwE);
 
   /* Writes the Channel filter register */
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(CHFLT_ADDR, 1, &tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(CHFLT_ADDR, 1, &tmpBuffer);
 
 }
 
@@ -1108,7 +1111,7 @@ uint32_t S2LPRadioGetChannelBW(void)
   uint8_t tmpBuffer, uBwM, uBwE;
 
   /* Reads the channel filter register for mantissa and exponent */
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(CHFLT_ADDR, 1, &tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(CHFLT_ADDR, 1, &tmpBuffer);
   uBwM = (tmpBuffer&0xF0)>>4;
   uBwE = tmpBuffer&0x0F;
 
@@ -1131,7 +1134,7 @@ void S2LPRadioSetModulation(ModulationSelect xModulation)
   S2LPSpiReadRegisters(MOD2_ADDR, 1, &tmpBuffer);
   tmpBuffer &= ~MOD_TYPE_REGMASK;
   tmpBuffer |= xModulation;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(MOD2_ADDR, 1, &tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(MOD2_ADDR, 1, &tmpBuffer);
 }
 
 
@@ -1144,7 +1147,7 @@ ModulationSelect S2LPRadioGetModulation(void)
 {
   uint8_t tmpBuffer;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(MOD2_ADDR, 1, &tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(MOD2_ADDR, 1, &tmpBuffer);
   return (ModulationSelect)(tmpBuffer&MOD_TYPE_REGMASK);
 
 }
@@ -1190,7 +1193,7 @@ void S2LPRadioSetMaxPALevel(SFunctionalState xNewState)
     tmp &= ~PA_MAXDBM_REGMASK;
   }
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PA_POWER0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PA_POWER0_ADDR, 1, &tmp);
 }
 
 
@@ -1209,17 +1212,22 @@ void S2LPRadioSetPALeveldBm(uint8_t cIndex, int32_t lPowerdBm)
   s_assert_param(IS_PA_MAX_INDEX(cIndex));
   s_assert_param(IS_PAPOWER_DBM(lPowerdBm));
 
-  if(lPowerdBm> 14)
+  if(lPowerdBm >= 14)
   {
     paLevelValue = 1;
   }
   else {
-    paLevelValue = (uint8_t)((int32_t)25-2*lPowerdBm);
+	if (lPowerdBm >= 11) {
+	  paLevelValue = (uint8_t) ((int32_t) 15 - lPowerdBm);
+	}
+	else {
+	  paLevelValue = (uint8_t) ((int32_t) 25 - 2 * lPowerdBm);
+	}
   }
 
   address = PA_POWER8_ADDR + 7 - cIndex;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(address, 1, &paLevelValue);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(address, 1, &paLevelValue);
 }
 
 
@@ -1232,14 +1240,22 @@ void S2LPRadioSetPALeveldBm(uint8_t cIndex, int32_t lPowerdBm)
 */
 int32_t S2LPRadioGetPALeveldBm(uint8_t cIndex)
 {
+  int32_t lPowerdBm = 0;
   uint8_t address, paLevelValue;
   s_assert_param(IS_PA_MAX_INDEX(cIndex));
 
   address = PA_POWER8_ADDR + 7 - cIndex;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(address, 1, &paLevelValue);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(address, 1, &paLevelValue);
+
+  if (paLevelValue <= 4) {
+    lPowerdBm = (int32_t) (15 - paLevelValue);
+  }
+  else {
+    lPowerdBm = (int32_t) ((25 - paLevelValue) / 2);
+  }
 
-  return ((int32_t)25-paLevelValue)/2;
+  return lPowerdBm;
 }
 
 
@@ -1256,7 +1272,7 @@ void S2LPRadioSetPALevelMaxIndex(uint8_t cIndex)
   S2LPSpiReadRegisters(PA_POWER0_ADDR, 1, &tmp);
   tmp &= (~PA_LEVEL_MAX_IDX_REGMASK);
   tmp |= cIndex;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PA_POWER0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PA_POWER0_ADDR, 1, &tmp);
 }
 
 
@@ -1268,7 +1284,7 @@ void S2LPRadioSetPALevelMaxIndex(uint8_t cIndex)
 uint8_t S2LPRadioGetPALevelMaxIndex(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PA_POWER0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PA_POWER0_ADDR, 1, &tmp);
   return (tmp & PA_LEVEL_MAX_IDX_REGMASK);
 }
 
@@ -1298,7 +1314,7 @@ void S2LPRadioSetAutoRampingMode(SFunctionalState xNewState)
     tmpBuffer[1] &= ~FIR_EN_REGMASK;
   }
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PA_POWER0_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PA_POWER0_ADDR, 2, tmpBuffer);
 }
 
 
@@ -1326,7 +1342,7 @@ void S2LPRadioSetManualRampingMode(SFunctionalState xNewState)
     tmpBuffer[0] &= ~PA_RAMP_EN_REGMASK;
   }
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PA_POWER0_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PA_POWER0_ADDR, 2, tmpBuffer);
 }
 
 
@@ -1355,7 +1371,7 @@ void S2LPRadioCalibrationVco(SFunctionalState xAmplitudeCalibration, SFunctional
   } else {
     tmp &= ~VCO_CALFREQ_EXT_SEL_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(VCO_CONFIG_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(VCO_CONFIG_ADDR, 1, &tmp);
 }
 
 /**
@@ -1366,7 +1382,7 @@ void S2LPRadioCalibrationVco(SFunctionalState xAmplitudeCalibration, SFunctional
 void S2LPRadioSetTxCalibVcoAmpWord(uint8_t value)
 {
   value <<= 4;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(VCO_CALIBR_IN2_ADDR, 1, &value);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(VCO_CALIBR_IN2_ADDR, 1, &value);
 }
 
 /**
@@ -1377,7 +1393,7 @@ void S2LPRadioSetTxCalibVcoAmpWord(uint8_t value)
 void S2LPRadioSetRxCalibVcoAmpWord(uint8_t value)
 {
   value &= VCO_CALAMP_RX_REGMASK;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(VCO_CALIBR_IN2_ADDR, 1, &value);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(VCO_CALIBR_IN2_ADDR, 1, &value);
 }
 
 /**
@@ -1387,7 +1403,7 @@ void S2LPRadioSetRxCalibVcoAmpWord(uint8_t value)
 */
 void S2LPRadioSetTxCalibVcoFreqWord(uint8_t value)
 {
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(VCO_CALIBR_IN1_ADDR, 1, &value);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(VCO_CALIBR_IN1_ADDR, 1, &value);
 }
 
 /**
@@ -1397,7 +1413,7 @@ void S2LPRadioSetTxCalibVcoFreqWord(uint8_t value)
 */
 void S2LPRadioSetRxCalibVcoFreqWord(uint8_t value)
 {
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(VCO_CALIBR_IN0_ADDR, 1, &value);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(VCO_CALIBR_IN0_ADDR, 1, &value);
 }
 
 
@@ -1445,7 +1461,7 @@ void S2LPRadioAfcInit(SAfcInit* xSAfcInit)
   tmpBuffer[1] = xSAfcInit->cAfcFastPeriod;
   tmpBuffer[2] = (xSAfcInit->cAfcFastGain<<4) | xSAfcInit->cAfcSlowGain;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(AFC2_ADDR, 3, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(AFC2_ADDR, 3, tmpBuffer);
 }
 
 
@@ -1484,7 +1500,7 @@ void S2LPRadioSetIsiEqualizationMode(SIsiEqu xSIsiMode)
   S2LPSpiReadRegisters(ANT_SELECT_CONF_ADDR, 1, &tmp);
   tmp &= ~EQU_CTRL_REGMASK;
   tmp |= (((uint8_t)xSIsiMode)<<5);
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(ANT_SELECT_CONF_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(ANT_SELECT_CONF_ADDR, 1, &tmp);
 }
 
 
@@ -1497,7 +1513,7 @@ SIsiEqu S2LPRadioGetIsiEqualizationMode(void)
 {
   uint8_t tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(ANT_SELECT_CONF_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(ANT_SELECT_CONF_ADDR, 1, &tmp);
   return (SIsiEqu)((tmp&EQU_CTRL_REGMASK)>>5);
 
 }
@@ -1532,7 +1548,7 @@ void S2LPRadioSymClkRecoverInit(SSymClkRecInit* xSSymClkRecInit)
   tmpBuffer[1] |= xSSymClkRecInit->cClkRecIGainFast;
   tmpBuffer[1] |= (xSSymClkRecInit->cClkRecPGainFast<<5);
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(CLOCKREC1_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(CLOCKREC1_ADDR, 2, tmpBuffer);
 }
 
 
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Timer.c b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Timer.c
index 3a7b751..bd2735d 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Timer.c
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Timer.c
@@ -22,9 +22,12 @@
 
 
 /* Includes ------------------------------------------------------------------*/
+#include "S2LP_Timer.h"
 
+#include "MCU_Interface_template.h"
 #include "S2LP_Config.h"
-
+#include "S2LP_Regs.h"
+#include "S2LP_Types.h"
 
 /**
  * @addtogroup S2LP_Libraries
@@ -297,7 +300,7 @@ void S2LPTimerLdcrMode(SFunctionalState xNewState)
   else {
     tmp &= ~LDC_MODE_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
 }
 
 
@@ -319,7 +322,7 @@ void S2LPTimerLdcrAutoReload(SFunctionalState xNewState)
   else {
     tmp &= ~LDC_RELOAD_ON_SYNC_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
 }
 
 
@@ -331,7 +334,7 @@ void S2LPTimerLdcrAutoReload(SFunctionalState xNewState)
 SFunctionalState S2LPTimerLdcrGetAutoReload(void)
 {
   uint8_t tmp;
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(PROTOCOL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(PROTOCOL1_ADDR, 1, &tmp);
   return (SFunctionalState)((tmp & LDC_RELOAD_ON_SYNC_REGMASK)!=0);
 }
 
@@ -347,7 +350,7 @@ SFunctionalState S2LPTimerLdcrGetAutoReload(void)
 void S2LPTimerSetRxTimer(uint8_t cCounter , uint8_t cPrescaler)
 {
   uint8_t tmpBuffer[2] = {cCounter, cPrescaler};
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS5_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS5_ADDR, 2, tmpBuffer);
 }
 
 
@@ -362,7 +365,7 @@ void S2LPTimerSetRxTimerUs(uint32_t lDesiredUsec)
 {
   uint8_t tmpBuffer[2];
   S2LPTimerComputeRxTimerRegValues(lDesiredUsec , &tmpBuffer[0] , &tmpBuffer[1]);
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS5_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS5_ADDR, 2, tmpBuffer);
 }
 
 
@@ -374,7 +377,7 @@ void S2LPTimerSetRxTimerUs(uint32_t lDesiredUsec)
  */
 void S2LPTimerSetRxTimerCounter(uint8_t cCounter)
 {
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS5_ADDR, 1, &cCounter);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS5_ADDR, 1, &cCounter);
 }
 
 
@@ -386,7 +389,7 @@ void S2LPTimerSetRxTimerCounter(uint8_t cCounter)
  */
 void S2LPTimerSetRxTimerPrescaler(uint8_t cPrescaler)
 {
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS4_ADDR, 1, &cPrescaler);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS4_ADDR, 1, &cPrescaler);
 }
 
 
@@ -405,7 +408,7 @@ void S2LPTimerGetRxTimerUs(uint32_t* plTimeoutUsec, uint8_t* pcCounter , uint8_t
 {
   uint8_t tmpBuffer[2];
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(TIMERS5_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(TIMERS5_ADDR, 2, tmpBuffer);
 
   (*pcCounter) = tmpBuffer[0];
   (*pcPrescaler) = tmpBuffer[1];
@@ -427,7 +430,7 @@ void S2LPTimerGetRxTimerUs(uint32_t* plTimeoutUsec, uint8_t* pcCounter , uint8_t
 void S2LPTimerSetWakeUpTimer(uint8_t cCounter , uint8_t cPrescaler)
 {
   uint8_t tmpBuffer[2] = {cPrescaler, cCounter};
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS3_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS3_ADDR, 2, tmpBuffer);
 }
 
 
@@ -452,7 +455,7 @@ void S2LPTimerSetWakeUpTimerUs(uint32_t lDesiredUsec)
   tmp |= multi;
   S2LPSpiWriteRegisters(PROTOCOL2_ADDR, 1, &tmp);
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS3_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS3_ADDR, 2, tmpBuffer);
 
 }
 
@@ -466,7 +469,7 @@ void S2LPTimerSetWakeUpTimerUs(uint32_t lDesiredUsec)
  */
 void S2LPTimerSetWakeUpTimerCounter(uint8_t cCounter)
 {
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS2_ADDR, 1, &cCounter);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS2_ADDR, 1, &cCounter);
 }
 
 
@@ -479,7 +482,7 @@ void S2LPTimerSetWakeUpTimerCounter(uint8_t cCounter)
  */
 void S2LPTimerSetWakeUpTimerPrescaler(uint8_t cPrescaler)
 {
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS3_ADDR, 1, &cPrescaler);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS3_ADDR, 1, &cPrescaler);
 }
 
 
@@ -501,7 +504,7 @@ void S2LPTimerGetWakeUpTimerUs(uint32_t* plWakeUpUsec, uint8_t* pcCounter, uint8
   tmp &= LDC_TIMER_MULT_REGMASK;
   *pcMulti = tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(TIMERS3_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(TIMERS3_ADDR, 2, tmpBuffer);
   *pcCounter = tmpBuffer[1];
   *pcPrescaler = tmpBuffer[0];
 
@@ -530,7 +533,7 @@ void S2LPTimerSetWakeUpTimerReload(uint8_t cCounter , uint8_t cPrescaler, uint8_
   tmp |= cMulti;
   S2LPSpiWriteRegisters(PROTOCOL2_ADDR, 1, &tmp);
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS1_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS1_ADDR, 2, tmpBuffer);
 }
 
 
@@ -554,7 +557,7 @@ void S2LPTimerSetWakeUpTimerReloadUs(uint32_t lDesiredUsec)
   tmp |= multi;
   S2LPSpiWriteRegisters(PROTOCOL2_ADDR, 1, &tmp);
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS1_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS1_ADDR, 2, tmpBuffer);
 }
 
 
@@ -567,7 +570,7 @@ void S2LPTimerSetWakeUpTimerReloadUs(uint32_t lDesiredUsec)
  */
 void S2LPTimerSetWakeUpTimerReloadCounter(uint8_t cCounter)
 {
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS0_ADDR, 1, &cCounter);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS0_ADDR, 1, &cCounter);
 }
 
 
@@ -580,7 +583,7 @@ void S2LPTimerSetWakeUpTimerReloadCounter(uint8_t cCounter)
  */
 void S2LPTimerSetWakeUpTimerReloadPrescaler(uint8_t cPrescaler)
 {
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS1_ADDR, 1, &cPrescaler);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(TIMERS1_ADDR, 1, &cPrescaler);
 }
 
 
@@ -602,7 +605,7 @@ void S2LPTimerGetWakeUpTimerReloadUs(uint32_t* plWakeUpReloadUsec, uint8_t* pcCo
   tmp &= LDC_TIMER_MULT_REGMASK;
   *pcMulti = tmp;
 
-  *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(TIMERS3_ADDR, 2, tmpBuffer);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(TIMERS3_ADDR, 2, tmpBuffer);
   *pcCounter = tmpBuffer[1];
   *pcPrescaler = tmpBuffer[0];
 
@@ -629,7 +632,7 @@ void S2LPTimerSetRxTimerStopCondition(RxTimeoutStopCondition xStopCondition)
   S2LPSpiReadRegisters(PCKT_FLT_OPTIONS_ADDR, 1, &tmp);
   tmp &= ~RX_TIMEOUT_AND_OR_SEL_REGMASK;
   tmp |= (((uint8_t)xStopCondition & 0x08) << 3);
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_OPTIONS_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PCKT_FLT_OPTIONS_ADDR, 1, &tmp);
 }
 
 
@@ -672,7 +675,7 @@ void S2LpTimerFastRxTermTimer(SFunctionalState xNewState)
   else {
     tmp &= ~FAST_CS_TERM_EN_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PROTOCOL1_ADDR, 1, &tmp);
 }
 
 
@@ -685,7 +688,7 @@ void S2LpTimerFastRxTermTimer(SFunctionalState xNewState)
  */
 void S2LpSetTimerFastRxTermTimer(uint8_t fast_rx_word)
 {
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(FAST_RX_TIMER_ADDR, 1, &fast_rx_word);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(FAST_RX_TIMER_ADDR, 1, &fast_rx_word);
 }
 
 
@@ -711,7 +714,7 @@ void S2LpSetTimerFastRxTermTimerUs(uint32_t fast_rx_us)
 
 
   fast_rx_word=((f_dig/24/(1<<(tmp&0x0F)))*fast_rx_us)/1000000;
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(FAST_RX_TIMER_ADDR, 1, &fast_rx_word);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(FAST_RX_TIMER_ADDR, 1, &fast_rx_word);
 }
 
 
@@ -735,7 +738,7 @@ void S2LPTimerCalibrationRco(SFunctionalState xCalibration)
   } else {
     tmp &= ~RCO_CALIBRATION_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(XO_RCO_CONF0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(XO_RCO_CONF0_ADDR, 1, &tmp);
 }
 
 /**
@@ -758,7 +761,7 @@ void S2LPTimerSleepB(SFunctionalState en)
   } else {
     tmp &= ~SLEEP_MODE_SEL_REGMASK;
   }
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(PM_CONF0_ADDR, 1, &tmp);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(PM_CONF0_ADDR, 1, &tmp);
 }
 
 void S2LPTimerLdcIrqWa(SFunctionalState en)
@@ -776,8 +779,8 @@ void S2LPTimerLdcIrqWa(SFunctionalState en)
     while(g_xStatus.MC_STATE!=0x7C);
   }
 
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(0x7B, 1, &tmp[1]);
-  *(uint8_t*)&g_xStatus = S2LPSpiWriteRegisters(0x7A, 1, &tmp[0]);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(0x7B, 1, &tmp[1]);
+  *(S2LPStatus*)&g_xStatus = S2LPSpiWriteRegisters(0x7A, 1, &tmp[0]);
 }
 
 
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Timer_ex.c b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Timer_ex.c
index 6f64aab..f6f1010 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Timer_ex.c
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Timer_ex.c
@@ -22,10 +22,12 @@
  */
 
 /* Includes ------------------------------------------------------------------*/
-#include "S2LP_Timer.h"
 #include "S2LP_Timer_ex.h"
-#include "S2LP_Regs.h"
 
+#include "MCU_Interface_template.h"
+#include "S2LP_Timer.h"
+#include "S2LP_Regs.h"
+#include "S2LP_Types.h"
 
 /** @addtogroup S2LP_Libraries
  * @{
diff --git a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Types.c b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Types.c
index 45aa85a..4b8047d 100644
--- a/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Types.c
+++ b/Drivers/BSP/Components/S2LP/S2LP_Library/src/S2LP_Types.c
@@ -23,9 +23,9 @@
 
 /* Includes ------------------------------------------------------------------*/
 #include "S2LP_Types.h"
-#include "S2LP_Regs.h"
-#include "S2LP_CORE_SPI.h"
 
+#include "MCU_Interface_template.h"
+#include "S2LP_Regs.h"
 
 /** @addtogroup S2LP_Libraries
  * @{
@@ -138,7 +138,7 @@ void S2LPRefreshStatus(void)
   do
   {
     /* Reads the MC_STATE register to update the g_xStatus */
-    *(uint8_t*)&g_xStatus = S2LPSpiReadRegisters(MC_STATE0_ADDR, 1, &tempRegValue);
+    *(S2LPStatus*)&g_xStatus = S2LPSpiReadRegisters(MC_STATE0_ADDR, 1, &tempRegValue);
   }
   while((tempRegValue>>1)!=g_xStatus.MC_STATE);
 }
